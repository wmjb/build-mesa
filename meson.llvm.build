project('llvm', ['cpp'])

cpp = meson.get_compiler('cpp')

deps = ['LLVMAggressiveInstCombine', 'LLVMAnalysis', 'LLVMAsmParser', 'LLVMAsmPrinter',
        'LLVMBinaryFormat', 'LLVMBitReader', 'LLVMBitstreamReader', 'LLVMBitWriter',
        'LLVMCFGuard', 'LLVMCodeGen', 'LLVMCodeGenTypes', 'LLVMCore', 'LLVMCoroutines',
        'LLVMDebugInfoBTF', 'LLVMDebugInfoCodeView', 'LLVMDebugInfoDWARF',
        'LLVMDebugInfoMSF', 'LLVMDebugInfoPDB', 'LLVMDemangle', 'LLVMExecutionEngine',
        'LLVMFrontendOffloading', 'LLVMFrontendOpenMP', 'LLVMGlobalISel', 'LLVMHipStdPar',
        'LLVMInstCombine', 'LLVMInstrumentation', 'LLVMInterpreter', 'LLVMipo',
        'LLVMIRPrinter', 'LLVMIRReader', 'LLVMLinker', 'LLVMMC', 'LLVMMCA',
        'LLVMMCDisassembler', 'LLVMMCJIT', 'LLVMMCParser', 'LLVMObjCARCOpts',
        'LLVMObject', 'LLVMOrcShared', 'LLVMOrcTargetProcess', 'LLVMPasses',
        'LLVMProfileData', 'LLVMRemarks', 'LLVMRuntimeDyld', 'LLVMScalarOpts',
        'LLVMSelectionDAG', 'LLVMSupport', 'LLVMSymbolize', 'LLVMTarget',
        'LLVMTargetParser', 'LLVMTextAPI', 'LLVMTransformUtils', 'LLVMVectorize']

if host_machine.cpu_family() == 'aarch32'
  folder = '../../../llvm-arm'
  deps += ['LLVMAArch32AsmParser', 'LLVMAArch32CodeGen', 'LLVMAArch32Desc',
           'LLVMAArch32Disassembler', 'LLVMAArch32Info', 'LLVMAArch32Utils']
else
  if host_machine.cpu_family() == 'x86_64'
    folder = '../../../llvm-x64'
  else
    folder = '../../../llvm-x86'
  endif
  deps += ['LLVMX86AsmParser', 'LLVMX86CodeGen', 'LLVMX86Desc', 'LLVMX86Disassembler',
           'LLVMX86Info', 'LLVMX86TargetMCA']
endif

_deps = []
_search = join_paths(meson.current_source_dir(), folder + '/lib')
foreach d : deps
  _deps += cpp.find_library(d, dirs : _search)
endforeach

dep_llvm = declare_dependency(
  include_directories : include_directories(folder + '/include'),
  dependencies : _deps,
  version : '19.1.2',
)
